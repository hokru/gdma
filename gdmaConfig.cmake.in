# gdmaConfig.cmake
# ------------------
#
# GDMA cmake module.
# This module sets the following variables in your project:
#
# ::
#
#   gdma_FOUND - true if gdma and all required components found on the system
#   gdma_VERSION - gdma version in format Major.Minor.Release
#   gdma_INCLUDE_DIRS - Directories where gdma header is located.
#   gdma_INCLUDE_DIR - same as DIRS
#   gdma_DEFINITIONS: Definitions necessary to use gdma, namely USING_gdma.
#   gdma_LIBRARIES - gdma library to link against.
#   gdma_LIBRARY - same as LIBRARIES
#
#
# Available components: shared static
#
# ::
#
#   shared - search for only shared library
#   static - search for only static library
#
#
# Exported targets:
#
# ::
#
# If gdma is found, this module defines the following :prop_tgt:`IMPORTED`
# target. Note that if gdma library is static, importing project must
# declare Fortran as a language in order to populate the link libs. ::
#
#   gdma::gdma - the main gdma library with header, defs, & linker lang attached.
#
#
# Suggested usage:
#
# ::
#
#   find_package(gdma)
#   find_package(gdma 2.2.06 EXACT CONFIG REQUIRED COMPONENTS static)
#
#
# The following variables can be set to guide the search for this package:
#
# ::
#
#   gdma_DIR - CMake variable, set to directory containing this Config file
#   CMAKE_PREFIX_PATH - CMake variable, set to root directory of this package
#   PATH - environment variable, set to bin directory of this package

@PACKAGE_INIT@

set(PACKAGE_NAME gdma)
set (_valid_components
    static
    shared
)
###
#set(GDMA_LIBRARIES ${GDMA_LIBRARY} @CMAKE_Fortran_IMPLICIT_LINK_LIBRARIES@)
###


# find includes
find_path(_temp_gdma_h
          NAMES GDMA/GDMA_MANGLE.h
          PATHS ${PACKAGE_PREFIX_DIR}/@CMAKE_INSTALL_INCLUDEDIR@
          NO_DEFAULT_PATH)
if(_temp_gdma_h)
    set(${PACKAGE_NAME}_INCLUDE_DIR "${_temp_gdma_h}")
    set(${PACKAGE_NAME}_INCLUDE_DIRS ${${PACKAGE_NAME}_INCLUDE_DIR})
else()
    set(${PACKAGE_NAME}_FOUND 0)
    if(NOT CMAKE_REQUIRED_QUIET)
        message(STATUS "gdmaConfig missing component: header (gdma: ${_temp_gdma_h})")
    endif()
endif()

# find library: shared, static, or whichever
set(_hold_library_suffixes ${CMAKE_FIND_LIBRARY_SUFFIXES})
list(FIND ${PACKAGE_NAME}_FIND_COMPONENTS "shared" _seek_shared)
list(FIND ${PACKAGE_NAME}_FIND_COMPONENTS "static" _seek_static)
if(_seek_shared GREATER -1)
    set(CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_SHARED_LIBRARY_SUFFIX})
elseif(_seek_static GREATER -1)
    set(CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_STATIC_LIBRARY_SUFFIX})
endif()
find_library(_temp_gdma
             NAMES gdma
             PATHS ${PACKAGE_PREFIX_DIR}/@CMAKE_INSTALL_LIBDIR@
             NO_DEFAULT_PATH)
if(_temp_gdma)
    set(${PACKAGE_NAME}_LIBRARY "${_temp_gdma}")
    if(_seek_shared GREATER -1)
        set(${PACKAGE_NAME}_shared_FOUND 1)
    elseif(_seek_static GREATER -1)
        set(${PACKAGE_NAME}_static_FOUND 1)
    endif()
else()
    if(_seek_shared GREATER -1)
        if(NOT CMAKE_REQUIRED_QUIET)
            message(STATUS "gdmaConfig missing component: shared library (gdma: ${_temp_gdma})")
        endif()
    elseif(_seek_static GREATER -1)
        if(NOT CMAKE_REQUIRED_QUIET)
            message(STATUS "gdmaConfig missing component: static library (gdma: ${_temp_gdma})")
        endif()
    else()
        set(${PACKAGE_NAME}_FOUND 0)
        if(NOT CMAKE_REQUIRED_QUIET)
            message(STATUS "gdmaConfig missing component: library (gdma: ${_temp_gdma})")
        endif()
    endif()
endif()
set(CMAKE_FIND_LIBRARY_SUFFIXES ${_hold_library_suffixes})
set(${PACKAGE_NAME}_LIBRARIES ${${PACKAGE_NAME}_LIBRARY})

check_required_components(${PACKAGE_NAME})

#-----------------------------------------------------------------------------
# Don't include targets if this file is being picked up by another
# project which has already built this as a subproject
#-----------------------------------------------------------------------------
if(NOT TARGET ${PACKAGE_NAME}::${PACKAGE_NAME})
    include("${CMAKE_CURRENT_LIST_DIR}/${PACKAGE_NAME}Targets.cmake")
endif()

